    # video_save = cv2.VideoWriter("C:\\Users\\SWC\Desktop\\videos\\" + mouse_date + str(i+1) + ".mp4", cv2.VideoWriter_fourcc(*"XVID"), fps, (1024, 1024), True)
    # video_save.release()


from distutils.core import setup

setup(name='opto_analysis', version='1.0.0', packages=['opto_analysis'])

def flatten(iterable: list):
    it = iter(iterable)
    for x in it:
        if isinstance(x, (list, tuple, np.ndarray)):
            for y in flatten(x):
                print(y)
                yield y
        else:
            yield x




            # shading_colors = [np.array(x) for x in [[254, 254, 254], [254, 253.5, 252.6], [254, 250, 240], [254, 250, 200], [200, 250, 254]]]
            # i = np.where( (self.speed - speed_thresholds)>0 )[0][-1] # index within the speed thresholds
            # shading_color_based_on_speed = ((speed_thresholds[i+1] - self.speed) * shading_colors[i] + (self.speed - speed_thresholds[i]) * shading_colors[i+1]) / (speed_thresholds[i+1] - speed_thresholds[i]) # somewhere between the darker and brighter color depending on its speed relative to the threshold speeds
            # self.shading_color_light = 1 - (1 - shading_color_based_on_speed / [255, 255, 255]) / (np.mean(1 - shading_color_based_on_speed / [255, 255, 255]) / .08)
            # self.shading_color_dark = (1 - (1 - shading_color_based_on_speed / [255, 255, 255]) / (np.mean(1 - shading_color_based_on_speed / [255, 255, 255]) / .38))**2


    def determine_trial_eligibility(self, stim_type):
        self.ineligible = stim_type=='audio' and \
                          (self.current_num_prev_escapes >= self.settings.max_escapes_per_mouse or \
                           self.current_trial_time_to_shelter > self.settings.max_time_to_reach_shelter)

    def extract_trajectory(self, stim_type, onset_frames):
        pass

                    distance_from_trial_start = \
                  ((self.tracking_data['avg_loc'][trial_start_idx:,0] - self.tracking_data['avg_loc'][trial_start_idx,0])**2 +\
                   (self.tracking_data['avg_loc'][trial_start_idx:,1] - self.tracking_data['avg_loc'][trial_start_idx,1])**2)**.5

                    np.where(distance_from_trial_start>500)[0][0]